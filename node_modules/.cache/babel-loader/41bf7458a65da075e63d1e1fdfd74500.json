{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/Documentos/entrevista/desafio-connecta/src/pages/Signin/index.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { Button, CssBaseline, TextField, FormControlLabel, Checkbox, Link, Grid, Typography, Container, makeStyles, CircularProgress, Snackbar, SnackbarContent, InputAdornment, IconButton } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignIn = () => {\n  /*const logged = isLogged()\n  const classes = useStyles()\n  const { email, time, token } = useParams()\n  const { user } = useContext(AuthContext)\n   const {\n      signIn,\n      loadingAuth,\n      warningModal,\n      handleCloseWarningModal,\n      message\n  } = useContext(AuthContext)\n  const [forgotPassword, setForgotPassword] = useState(false)\n  const [recovery, setRecovery] = useState(false)\n  const [snackMessage, setSnackMessage] = useState('')\n  const [snack, setSnack] = useState(false)\n  const [snackColor, setSnackColor] = useState('')\n  const [show, setShow] = useState(false)\n  const [loading, setLoading] = useState(false)\n   const handleOpenForgotPassword = () => setForgotPassword(true)\n  const handleCloseForgotPassword = () => setForgotPassword(false)\n  const handleOpenRecovery = () => setRecovery(true)\n  const handleCloseRecovery = () => setRecovery(false)\n  const handleOpenSnack = () => setSnack(true)\n  const handleCloseSnack = () => setSnack(false)\n   useEffect(() => {\n      if (email && time && token) {\n          validateLink()\n      }\n  }, [])\n   const sendEmail = async (email) => {\n      setLoading(true)\n      const response = await api.sendEmailRecovery(email)\n      if (response?.status === 200) {\n          setSnackColor('#070')\n          setSnackMessage('Verifique seu e-mail e siga as instruções para recuperar sua senha.')\n          handleOpenSnack()\n          handleCloseForgotPassword()\n          setLoading(false)\n      } else {\n          setSnackColor('#da1e37')\n          setSnackMessage('E-mail não localizado!')\n          handleOpenSnack()\n          setLoading(false)\n      }\n   }\n   const validateLink = async () => {\n      const response = await api.validateLink(email, time, token)\n      if (response?.status === 200) {\n          handleOpenRecovery()\n      } else {\n          setSnackColor('#da1e37')\n          setSnackMessage('Link de redefinição de senha inválido ou expirado!')\n          handleOpenSnack()\n      }\n  }\n   const changePassword = async (password) => {\n      setLoading(true)\n      const response = await api.setNewPassword(email, time, token, password)\n      if (response?.status === 200) {\n          setSnackColor('#070')\n          setSnackMessage('Nova senha salva com sucesso!')\n          handleOpenSnack()\n          handleCloseRecovery()\n          setLoading(false)\n      } else {\n          setSnackColor('#da1e37')\n          setSnackMessage('Link de redefinição de senha inválido ou expirado!')\n          handleOpenSnack()\n          setLoading(false)\n          handleCloseRecovery()\n      }\n  }\n   const initialFormState = {\n      email: '',\n      password: ''\n  }\n   const validationSchema = yup.object().shape({\n      email: yup.string().email('Entre com um e-mail válido!').required('O e-mail é obrigatório!'),\n      password: yup.string('Entre com sua senha').required('A senha é obrigatória!'),\n  })\n   const formik = useFormik({\n      initialValues: initialFormState,\n      validationSchema: validationSchema,\n      onSubmit: async (values) => {\n          await signIn(values.email.trim(), values.password.trim())\n      }\n  })*/\n  return /*#__PURE__*/_jsxDEV(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.paper,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h5\",\n        children: \"Realize seu login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.form,\n        noValidate: true,\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          id: \"email\",\n          label: \"E-mail\",\n          name: \"email\",\n          autoComplete: \"email\",\n          autoFocus: true,\n          value: formik.values.email,\n          onChange: formik.handleChange,\n          error: formik.touched.email && Boolean(formik.errors.email),\n          helperText: formik.touched.email && formik.errors.email,\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                color: \"default\",\n                children: /*#__PURE__*/_jsxDEV(EmailIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 33\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"password\",\n          name: \"password\",\n          label: \"Senha\",\n          variant: \"outlined\",\n          fullWidth: true,\n          required: true,\n          type: show ? 'text' : 'password',\n          value: formik.values.password,\n          onChange: formik.handleChange,\n          autoComplete: \"current-password\",\n          error: formik.touched.password && Boolean(formik.errors.password),\n          helperText: formik.touched.password && formik.errors.password,\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                color: \"default\",\n                onClick: () => setShow(!show),\n                children: show ? /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 49\n                }, this) : /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 66\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 33\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          fullWidth: true,\n          variant: \"contained\",\n          color: \"primary\",\n          className: classes.submit,\n          children: \"Entrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n\n_c = SignIn;\nexport default SignIn;\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    backgroundColor: '#070',\n    '&:hover': {\n      background: '#005200'\n    }\n  },\n  logo: {\n    width: 160\n  },\n  title: {\n    flexGrow: 1,\n    textTransform: 'capitalize',\n    margin: 0\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["/home/vinicius/Documentos/entrevista/desafio-connecta/src/pages/Signin/index.js"],"names":["React","useState","useContext","useEffect","useParams","useFormik","yup","Button","CssBaseline","TextField","FormControlLabel","Checkbox","Link","Grid","Typography","Container","makeStyles","CircularProgress","Snackbar","SnackbarContent","InputAdornment","IconButton","SignIn","classes","paper","form","formik","handleSubmit","values","email","handleChange","touched","Boolean","errors","endAdornment","show","password","setShow","submit","useStyles","theme","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","width","background","logo","title","flexGrow","textTransform"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useFormik } from 'formik'\nimport * as yup from 'yup'\n\nimport {\n    Button, CssBaseline, TextField, FormControlLabel, Checkbox, Link,\n    Grid, Typography, Container, makeStyles, CircularProgress,\n    Snackbar, SnackbarContent, InputAdornment, IconButton\n} from '@material-ui/core'\n\n\nconst SignIn = () => {\n\n    /*const logged = isLogged()\n    const classes = useStyles()\n    const { email, time, token } = useParams()\n    const { user } = useContext(AuthContext)\n\n    const {\n        signIn,\n        loadingAuth,\n        warningModal,\n        handleCloseWarningModal,\n        message\n    } = useContext(AuthContext)\n    const [forgotPassword, setForgotPassword] = useState(false)\n    const [recovery, setRecovery] = useState(false)\n    const [snackMessage, setSnackMessage] = useState('')\n    const [snack, setSnack] = useState(false)\n    const [snackColor, setSnackColor] = useState('')\n    const [show, setShow] = useState(false)\n    const [loading, setLoading] = useState(false)\n\n    const handleOpenForgotPassword = () => setForgotPassword(true)\n    const handleCloseForgotPassword = () => setForgotPassword(false)\n    const handleOpenRecovery = () => setRecovery(true)\n    const handleCloseRecovery = () => setRecovery(false)\n    const handleOpenSnack = () => setSnack(true)\n    const handleCloseSnack = () => setSnack(false)\n\n    useEffect(() => {\n        if (email && time && token) {\n            validateLink()\n        }\n    }, [])\n\n    const sendEmail = async (email) => {\n        setLoading(true)\n        const response = await api.sendEmailRecovery(email)\n        if (response?.status === 200) {\n            setSnackColor('#070')\n            setSnackMessage('Verifique seu e-mail e siga as instruções para recuperar sua senha.')\n            handleOpenSnack()\n            handleCloseForgotPassword()\n            setLoading(false)\n        } else {\n            setSnackColor('#da1e37')\n            setSnackMessage('E-mail não localizado!')\n            handleOpenSnack()\n            setLoading(false)\n        }\n\n    }\n\n    const validateLink = async () => {\n        const response = await api.validateLink(email, time, token)\n        if (response?.status === 200) {\n            handleOpenRecovery()\n        } else {\n            setSnackColor('#da1e37')\n            setSnackMessage('Link de redefinição de senha inválido ou expirado!')\n            handleOpenSnack()\n        }\n    }\n\n    const changePassword = async (password) => {\n        setLoading(true)\n        const response = await api.setNewPassword(email, time, token, password)\n        if (response?.status === 200) {\n            setSnackColor('#070')\n            setSnackMessage('Nova senha salva com sucesso!')\n            handleOpenSnack()\n            handleCloseRecovery()\n            setLoading(false)\n        } else {\n            setSnackColor('#da1e37')\n            setSnackMessage('Link de redefinição de senha inválido ou expirado!')\n            handleOpenSnack()\n            setLoading(false)\n            handleCloseRecovery()\n        }\n    }\n\n    const initialFormState = {\n        email: '',\n        password: ''\n    }\n\n    const validationSchema = yup.object().shape({\n        email: yup.string().email('Entre com um e-mail válido!').required('O e-mail é obrigatório!'),\n        password: yup.string('Entre com sua senha').required('A senha é obrigatória!'),\n    })\n\n    const formik = useFormik({\n        initialValues: initialFormState,\n        validationSchema: validationSchema,\n        onSubmit: async (values) => {\n            await signIn(values.email.trim(), values.password.trim())\n        }\n    })*/\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Realize seu login\n                </Typography> \n                <form className={classes.form} noValidate onSubmit={formik.handleSubmit}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"email\"\n                        label=\"E-mail\"\n                        name=\"email\"\n                        autoComplete=\"email\"\n                        autoFocus\n                        value={formik.values.email}\n                        onChange={formik.handleChange}\n                        error={formik.touched.email && Boolean(formik.errors.email)}\n                        helperText={formik.touched.email && formik.errors.email}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <IconButton color='default'>\n                                        <EmailIcon />\n                                    </IconButton>\n                                </InputAdornment>\n                            )\n                        }}\n                    />\n                    <TextField\n                        id=\"password\"\n                        name=\"password\"\n                        label=\"Senha\"\n                        variant='outlined'\n                        fullWidth\n                        required\n                        type={show ? 'text' : 'password'}\n                        value={formik.values.password}\n                        onChange={formik.handleChange}\n                        autoComplete=\"current-password\"\n                        error={formik.touched.password && Boolean(formik.errors.password)}\n                        helperText={formik.touched.password && formik.errors.password}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <IconButton\n                                        color='default'\n                                        onClick={() => setShow(!show)}\n                                    >\n                                        {show ? <Visibility /> : <VisibilityOff />}\n                                    </IconButton>\n                                </InputAdornment>\n                            )\n                        }}\n                    />\n\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Entrar\n                    </Button>\n                    \n                </form>\n\n            </div>\n        </Container>\n    );\n}\n\nexport default SignIn\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n        backgroundColor: '#070',\n\n        '&:hover': {\n            background: '#005200'\n        },\n    },\n    logo: {\n        width: 160\n    },\n    title: {\n        flexGrow: 1,\n        textTransform: 'capitalize',\n        margin: 0,\n    },\n}));"]},"metadata":{},"sourceType":"module"}