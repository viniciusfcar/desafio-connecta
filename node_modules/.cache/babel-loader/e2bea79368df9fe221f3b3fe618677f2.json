{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/Documentos/entrevista/desafio-connecta/src/pages/Signin/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { AuthContext } from '../../context/AuthContext';\nimport EmailIcon from '@material-ui/icons/Email';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport welcome from '../../assets/imagens/welcome.jpeg';\nimport { Button, CssBaseline, TextField, Typography, Container, makeStyles, InputAdornment, IconButton, Grid, Link } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignIn = () => {\n  _s();\n\n  const {\n    signIn\n  } = useContext(AuthContext);\n  const classes = useStyles();\n  const [show, setShow] = useState(false);\n  /*const logged = isLogged()\n  \n  const { email, time, token } = useParams()\n  const { user } = useContext(AuthContext)\n   const {\n      signIn,\n      loadingAuth,\n      warningModal,\n      handleCloseWarningModal,\n      message\n  } = useContext(AuthContext)\n  const [forgotPassword, setForgotPassword] = useState(false)\n  const [recovery, setRecovery] = useState(false)\n  const [snackMessage, setSnackMessage] = useState('')\n  const [snack, setSnack] = useState(false)\n  const [snackColor, setSnackColor] = useState('')\n  const [show, setShow] = useState(false)\n  const [loading, setLoading] = useState(false)\n   const handleOpenForgotPassword = () => setForgotPassword(true)\n  const handleCloseForgotPassword = () => setForgotPassword(false)\n  const handleOpenRecovery = () => setRecovery(true)\n  const handleCloseRecovery = () => setRecovery(false)\n  const handleOpenSnack = () => setSnack(true)\n  const handleCloseSnack = () => setSnack(false)\n   useEffect(() => {\n      if (email && time && token) {\n          validateLink()\n      }\n  }, [])\n   const sendEmail = async (email) => {\n      setLoading(true)\n      const response = await api.sendEmailRecovery(email)\n      if (response?.status === 200) {\n          setSnackColor('#070')\n          setSnackMessage('Verifique seu e-mail e siga as instruções para recuperar sua senha.')\n          handleOpenSnack()\n          handleCloseForgotPassword()\n          setLoading(false)\n      } else {\n          setSnackColor('#da1e37')\n          setSnackMessage('E-mail não localizado!')\n          handleOpenSnack()\n          setLoading(false)\n      }\n   }\n   const validateLink = async () => {\n      const response = await api.validateLink(email, time, token)\n      if (response?.status === 200) {\n          handleOpenRecovery()\n      } else {\n          setSnackColor('#da1e37')\n          setSnackMessage('Link de redefinição de senha inválido ou expirado!')\n          handleOpenSnack()\n      }\n  }\n   const changePassword = async (password) => {\n      setLoading(true)\n      const response = await api.setNewPassword(email, time, token, password)\n      if (response?.status === 200) {\n          setSnackColor('#070')\n          setSnackMessage('Nova senha salva com sucesso!')\n          handleOpenSnack()\n          handleCloseRecovery()\n          setLoading(false)\n      } else {\n          setSnackColor('#da1e37')\n          setSnackMessage('Link de redefinição de senha inválido ou expirado!')\n          handleOpenSnack()\n          setLoading(false)\n          handleCloseRecovery()\n      }\n  }*/\n\n  const initialFormState = {\n    email: '',\n    password: ''\n  };\n  const validationSchema = yup.object().shape({\n    email: yup.string().email('Entre com um e-mail válido!').required('O e-mail é obrigatório!'),\n    password: yup.string('Entre com sua senha').required('A senha é obrigatória!')\n  });\n  const formik = useFormik({\n    initialValues: initialFormState,\n    validationSchema: validationSchema,\n    onSubmit: async values => {\n      await signIn(values.email.trim(), values.password.trim());\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.paper,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: classes.logo,\n        src: welcome,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h5\",\n        className: classes.title,\n        children: \"REALIZE SEU LOGIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.form,\n        noValidate: true,\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          id: \"email\",\n          label: \"E-mail\",\n          name: \"email\",\n          autoComplete: \"email\",\n          autoFocus: true,\n          value: formik.values.email,\n          onChange: formik.handleChange,\n          error: formik.touched.email && Boolean(formik.errors.email),\n          helperText: formik.touched.email && formik.errors.email,\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                color: \"default\",\n                children: /*#__PURE__*/_jsxDEV(EmailIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 33\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"password\",\n          name: \"password\",\n          label: \"Senha\",\n          variant: \"outlined\",\n          fullWidth: true,\n          required: true,\n          type: show ? 'text' : 'password',\n          value: formik.values.password,\n          onChange: formik.handleChange,\n          autoComplete: \"current-password\",\n          error: formik.touched.password && Boolean(formik.errors.password),\n          helperText: formik.touched.password && formik.errors.password,\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                color: \"default\",\n                onClick: () => setShow(!show),\n                children: show ? /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 49\n                }, this) : /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 66\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 33\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          fullWidth: true,\n          variant: \"contained\",\n          color: \"primary\",\n          className: classes.submit,\n          children: \"Entrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: '/cadastro',\n            variant: \"body2\",\n            className: classes.link,\n            children: \"Cadastre-se\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SignIn, \"hyumpNEcsa6yFF/7/w+yA9wO+E0=\", false, function () {\n  return [useStyles, useFormik];\n});\n\n_c = SignIn;\nexport default SignIn;\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    backgroundColor: '#070',\n    '&:hover': {\n      background: '#005200'\n    }\n  },\n  logo: {\n    width: 300,\n    marginTop: '20%'\n  },\n  title: {\n    flexGrow: 1,\n    textTransform: 'capitalize',\n    marginTop: '10%'\n  },\n  link: {\n    fontSize: 20\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["/home/vinicius/Documentos/entrevista/desafio-connecta/src/pages/Signin/index.js"],"names":["React","useState","useContext","useFormik","yup","AuthContext","EmailIcon","Visibility","VisibilityOff","welcome","Button","CssBaseline","TextField","Typography","Container","makeStyles","InputAdornment","IconButton","Grid","Link","SignIn","signIn","classes","useStyles","show","setShow","initialFormState","email","password","validationSchema","object","shape","string","required","formik","initialValues","onSubmit","values","trim","paper","logo","title","form","handleSubmit","handleChange","touched","Boolean","errors","endAdornment","submit","link","theme","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","width","background","flexGrow","textTransform","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useContext} from 'react'\nimport { useFormik } from 'formik'\nimport * as yup from 'yup'\n\nimport {AuthContext} from '../../context/AuthContext'\nimport EmailIcon from '@material-ui/icons/Email'\nimport Visibility from '@material-ui/icons/Visibility'\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\n\nimport welcome from '../../assets/imagens/welcome.jpeg'\n\nimport {\n    Button, CssBaseline, TextField, Typography,\n    Container, makeStyles, InputAdornment, IconButton, Grid,\n    Link\n} from '@material-ui/core'\n\n\nconst SignIn = () => {\n\n    const {\n        signIn,\n    } = useContext(AuthContext)\n\n    const classes = useStyles()\n    const [show, setShow] = useState(false)\n\n    /*const logged = isLogged()\n    \n    const { email, time, token } = useParams()\n    const { user } = useContext(AuthContext)\n\n    const {\n        signIn,\n        loadingAuth,\n        warningModal,\n        handleCloseWarningModal,\n        message\n    } = useContext(AuthContext)\n    const [forgotPassword, setForgotPassword] = useState(false)\n    const [recovery, setRecovery] = useState(false)\n    const [snackMessage, setSnackMessage] = useState('')\n    const [snack, setSnack] = useState(false)\n    const [snackColor, setSnackColor] = useState('')\n    const [show, setShow] = useState(false)\n    const [loading, setLoading] = useState(false)\n\n    const handleOpenForgotPassword = () => setForgotPassword(true)\n    const handleCloseForgotPassword = () => setForgotPassword(false)\n    const handleOpenRecovery = () => setRecovery(true)\n    const handleCloseRecovery = () => setRecovery(false)\n    const handleOpenSnack = () => setSnack(true)\n    const handleCloseSnack = () => setSnack(false)\n\n    useEffect(() => {\n        if (email && time && token) {\n            validateLink()\n        }\n    }, [])\n\n    const sendEmail = async (email) => {\n        setLoading(true)\n        const response = await api.sendEmailRecovery(email)\n        if (response?.status === 200) {\n            setSnackColor('#070')\n            setSnackMessage('Verifique seu e-mail e siga as instruções para recuperar sua senha.')\n            handleOpenSnack()\n            handleCloseForgotPassword()\n            setLoading(false)\n        } else {\n            setSnackColor('#da1e37')\n            setSnackMessage('E-mail não localizado!')\n            handleOpenSnack()\n            setLoading(false)\n        }\n\n    }\n\n    const validateLink = async () => {\n        const response = await api.validateLink(email, time, token)\n        if (response?.status === 200) {\n            handleOpenRecovery()\n        } else {\n            setSnackColor('#da1e37')\n            setSnackMessage('Link de redefinição de senha inválido ou expirado!')\n            handleOpenSnack()\n        }\n    }\n\n    const changePassword = async (password) => {\n        setLoading(true)\n        const response = await api.setNewPassword(email, time, token, password)\n        if (response?.status === 200) {\n            setSnackColor('#070')\n            setSnackMessage('Nova senha salva com sucesso!')\n            handleOpenSnack()\n            handleCloseRecovery()\n            setLoading(false)\n        } else {\n            setSnackColor('#da1e37')\n            setSnackMessage('Link de redefinição de senha inválido ou expirado!')\n            handleOpenSnack()\n            setLoading(false)\n            handleCloseRecovery()\n        }\n    }*/\n\n    const initialFormState = {\n        email: '',\n        password: ''\n    }\n\n    const validationSchema = yup.object().shape({\n        email: yup.string().email('Entre com um e-mail válido!').required('O e-mail é obrigatório!'),\n        password: yup.string('Entre com sua senha').required('A senha é obrigatória!'),\n    })\n\n    const formik = useFormik({\n        initialValues: initialFormState,\n        validationSchema: validationSchema,\n        onSubmit: async (values) => {\n            await signIn(values.email.trim(), values.password.trim())\n        }\n    })\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <img className={classes.logo} src={welcome} alt='' />\n                <Typography component=\"h1\" variant=\"h5\" className={classes.title}>\n                    REALIZE SEU LOGIN\n                </Typography> \n                <form className={classes.form} noValidate onSubmit={formik.handleSubmit}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"email\"\n                        label=\"E-mail\"\n                        name=\"email\"\n                        autoComplete=\"email\"\n                        autoFocus\n                        value={formik.values.email}\n                        onChange={formik.handleChange}\n                        error={formik.touched.email && Boolean(formik.errors.email)}\n                        helperText={formik.touched.email && formik.errors.email}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <IconButton color='default'>\n                                        <EmailIcon />\n                                    </IconButton>\n                                </InputAdornment>\n                            )\n                        }}\n                    />\n                    <TextField\n                        id=\"password\"\n                        name=\"password\"\n                        label=\"Senha\"\n                        variant='outlined'\n                        fullWidth\n                        required\n                        type={show ? 'text' : 'password'}\n                        value={formik.values.password}\n                        onChange={formik.handleChange}\n                        autoComplete=\"current-password\"\n                        error={formik.touched.password && Boolean(formik.errors.password)}\n                        helperText={formik.touched.password && formik.errors.password}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <IconButton\n                                        color='default'\n                                        onClick={() => setShow(!show)}\n                                    >\n                                        {show ? <Visibility /> : <VisibilityOff />}\n                                    </IconButton>\n                                </InputAdornment>\n                            )\n                        }}\n                    />\n\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Entrar\n                    </Button>\n                    \n                </form>\n\n                <Grid container>\n                    <Grid item xs>\n                        <Link to={'/cadastro'} variant=\"body2\" className={classes.link}>\n                            Cadastre-se\n                        </Link>\n                    </Grid>\n                </Grid>\n\n            </div>\n        </Container>\n    );\n}\n\nexport default SignIn\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n        backgroundColor: '#070',\n\n        '&:hover': {\n            background: '#005200'\n        },\n    },\n    logo: {\n        width: 300,\n        marginTop: '20%'\n    },\n    title: {\n        flexGrow: 1,\n        textTransform: 'capitalize',\n        marginTop: '10%',\n    },\n    link: {\n        fontSize: 20\n    }\n}));"]},"metadata":{},"sourceType":"module"}